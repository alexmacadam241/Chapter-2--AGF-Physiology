knitr::opts_chunk$set(echo = TRUE)
colour <- read.csv("/Users/alexmacadam/Documents/GitHub/Chapter-2--AGF-Physiology/data/Juvenile-colour-2020.csv", header=T, fileEncoding="UTF-8-BOM") |>
mutate( Treatment = factor(Treatment),
Plate.Slide = factor(Plate.Slide),
Temp = factor(Temp),
popcross = factor(popcross)
) |>
filter(IndID != "NA")
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
library(tidyverse) #for data wrangling
library(car)       #for regression diagnostics
library(broom)     #for tidy output
library(ggfortify) #for model diagnostics
library(sjPlot)    #for outputs
library(knitr)     #for kable
library(effects)   #for partial effects plots
library(emmeans)   #for estimating marginal means
library(MASS)      #for glm.nb
library(MuMIn)     #for AICc
library(brms)
library(broom.mixed)
library(tidybayes)
library(bayesplot)
library(rstanarm)
library(ggeffects)
library(rstan)
library(DHARMa)
library(ggridges)
library(easystats)
library(patchwork)
source('/Users/alexmacadam/Documents/GitHub/Chapter-2--AGF-Physiology/data/helperFunctions.R')
# Function for summarising survival standard error
summarySE <- function(data=NULL, measurevar=NULL, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
require(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm==TRUE) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Commenting this rename mean column line, as not assigning measurevar name properly
# # Rename the "mean" column
# datac <- rename(datac, measurevar = mean)
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
colour <- read.csv("/Users/alexmacadam/Documents/GitHub/Chapter-2--AGF-Physiology/data/Juvenile-colour-2020.csv", header=T, fileEncoding="UTF-8-BOM") |>
mutate( Treatment = factor(Treatment),
Plate.Slide = factor(Plate.Slide),
Temp = factor(Temp),
popcross = factor(popcross)
) |>
filter(IndID != "NA")
colour$symxtemp <- paste(colour$Treatment, colour$Temp, sep='_')
colour$symxtemp <- as.factor(colour$symxtemp)
#colour change
colour<- colour |>
mutate(T0_2 = (100-(T0 / 255)*100))
colour<- colour |>
mutate(T6_2 = (100-(T6 / 255)*100))
colour<- colour |>
mutate(Grey_change_2 = T6_2 - T0_2)
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
library(tidyverse) #for data wrangling
library(car)       #for regression diagnostics
library(broom)     #for tidy output
library(ggfortify) #for model diagnostics
library(sjPlot)    #for outputs
library(knitr)     #for kable
library(effects)   #for partial effects plots
library(emmeans)   #for estimating marginal means
library(MASS)      #for glm.nb
library(MuMIn)     #for AICc
library(brms)
library(broom.mixed)
library(tidybayes)
library(bayesplot)
library(rstanarm)
library(ggeffects)
library(rstan)
library(DHARMa)
library(ggridges)
library(easystats)
library(patchwork)
source('/Users/alexmacadam/Documents/GitHub/Chapter-2--AGF-Physiology/data/helperFunctions.R')
# Function for summarising survival standard error
summarySE <- function(data=NULL, measurevar=NULL, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
require(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm==TRUE) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Commenting this rename mean column line, as not assigning measurevar name properly
# # Rename the "mean" column
# datac <- rename(datac, measurevar = mean)
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
colour <- read.csv("/Users/alexmacadam/Documents/GitHub/Chapter-2--AGF-Physiology/data/Juvenile-colour-2020.csv", header=T, fileEncoding="UTF-8-BOM") |>
mutate( Treatment = factor(Treatment),
Plate.Slide = factor(Plate.Slide),
Temp = factor(Temp),
popcross = factor(popcross)
) |>
filter(IndID != "NA")
colour$symxtemp <- paste(colour$Treatment, colour$Temp, sep='_')
colour$symxtemp <- as.factor(colour$symxtemp)
#colour change
colour<- colour |>
mutate(T0_2 = (100-(T0 / 255)*100))
colour<- colour |>
mutate(T6_2 = (100-(T6 / 255)*100))
colour<- colour |>
mutate(Grey_change_2 = T6_2 - T0_2)
#all
col.change.all.sum.se <- summarySE(colour, measurevar="Grey_change_2",
groupvars=c("Temp"), na.rm=TRUE)
#by reef cross
col.change.sum.se <- summarySE(colour, measurevar="Grey_change_2",
groupvars=c("Temp", "Treatment"), na.rm=TRUE)
colour.form <- bf(Grey_change_2 ~ symxtemp + (1|Plate.Slide),
family = gaussian()
)
priors<- prior("normal(-4, 6)", class = "Intercept") +
prior("normal(0, 8)", class = "b") +
#prior("normal(0, 0.5)", class = "sd", group = "Tank") +
prior("normal(0, 7)", class = "sd", group = "Plate.Slide") +
prior(student_t(3, 0, 6), class = 'sigma') +
prior(cauchy(0,2), class = 'sd')
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
library(tidyverse) #for data wrangling
library(car)       #for regression diagnostics
library(broom)     #for tidy output
library(ggfortify) #for model diagnostics
library(sjPlot)    #for outputs
library(knitr)     #for kable
library(effects)   #for partial effects plots
library(emmeans)   #for estimating marginal means
library(MASS)      #for glm.nb
library(MuMIn)     #for AICc
library(brms)
library(broom.mixed)
library(tidybayes)
library(bayesplot)
library(rstanarm)
library(ggeffects)
library(rstan)
library(DHARMa)
library(ggridges)
library(easystats)     #framework for stats, modelling and visualisation
library(patchwork)
source('/Users/alexmacadam/Documents/GitHub/Chapter-2--AGF-Physiology/data/helperFunctions.R')
survival.hya <- read.csv('/Users/alexmacadam/Documents/GitHub/Chapter-2--AGF-Physiology/data/Adult-survival.csv', header=T) |>
filter(Species == "A. hyacinthus", Timepoint == "T5") |> #remove other species data
mutate(Survival=as.numeric(Survival), Bleaching_D=as.numeric(Bleaching_D), TissueArea_cm2=as.numeric(TissueArea_cm2)) |> #format columns
mutate(Tank = factor(Tank),
Position = factor(Position),
Stick = factor(Stick),
Genotype = factor(Genotype),
Temperature = factor(Temperature, levels=c('Ambient', 'Hot')),
Reef = factor(Reef, levels=c('Davies','Palms','Arlington','Martin','Wood')),
Timepoint = factor(Timepoint),
Species = factor(Species)
) # change columns to factors
survival.form <- bf(Survival | trials(1) ~ Population * Temperature + (1|Tank),
family=binomial(link='logit'))
priors <-
prior(normal(1.5, 5), class = 'Intercept') +
prior(normal(1, 10), class = 'b') +
prior(student_t(5, 0, 2.5), class = 'sd')
survival.brm <- brm(survival.form,
data = survival.hya,
prior = priors,
sample_prior = 'yes',
iter = 5000,
warmup = 2500,
chains = 3, cores = 3,
thin = 5,
control = list(adapt_delta = 0.99, max_treedepth = 20),
refresh = 0
)
?brm
survival.brm <- brm(survival.form,
data = survival.hya,
prior = priors,
sample_prior = 'yes',
iter = 5000,
warmup = 2500,
chains = 3, cores = 3,
thin = 5,
control = list(adapt_delta = 0.99, max_treedepth = 20),
refresh = 0,
backend = "cmdstanr"
)
library(cmdstanr)
knitr::opts_chunk$set(echo = TRUE)
survival.brm3 <- brm(survival.form,
data = survival_hot,
prior = priors,
sample_prior = 'yes',
iter = 5000,
warmup = 2500,
chains = 3, cores = 3,
thin = 5,
control = list(adapt_delta = 0.99, max_treedepth = 20),
refresh = 0,
backend = "cmdstanr"
)
