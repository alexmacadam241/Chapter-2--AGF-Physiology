groupvars=c("Temp", "popcross"), na.rm=TRUE)
#saveRDS(size.brm2, file = "size.brm2_A.tenuis_juv.rds")
size.brm2 <- readRDS("/Users/alexmacadam/Documents/GitHub/Chapter-2--AGF-Physiology/data/size.brm2_A.tenuis_juv.rds")
size.brm2 |>
summarise_draws(
median,
HDInterval::hdi,
Pl = ~mean(.x < 0),
Pg = ~mean(.x > 0),
rhat,
ess_bulk
) |>
knitr::kable()
size.brm2 %>%
gather_draws(`b_Intercept.*|b_symxtemp.*`, regex=TRUE) %>%
ggplot() +
geom_vline(xintercept=0, linetype='dashed') +
stat_slab(aes(x = .value, y = .variable,
fill = stat(ggdist::cut_cdf_qi(cdf,
.width = c(0.5, 0.8, 0.95),
labels = scales::percent_format())
)), color='black') +
scale_fill_brewer('Interval', direction = -1, na.translate = FALSE)
size.brm2 %>%
gather_draws(`.Intercept.*|b_symxtemp.*`, regex=TRUE) %>%
ggplot() +
geom_vline(xintercept = 0, linetype='dashed') +
stat_halfeye(aes(x=.value,  y=.variable)) +
theme_classic()
##in colour
size.brm2 %>%
gather_draws(`^b_.*`, regex=TRUE) %>%
filter(.variable != 'b_Intercept') %>%
ggplot() +
geom_density_ridges_gradient(aes(x=(.value),
y = .variable,
fill = stat(x)),
alpha=0.4, colour = 'white',
quantile_lines = TRUE,
quantiles = c(0.025, 0.975)) +
geom_vline(xintercept = 1, linetype = 'dashed') +
scale_x_continuous() +
scale_fill_viridis_c(option = "C")
size.brm2 %>%
emmeans(~symxtemp) %>%
pairs()
cmat<- cbind(
"D1_HOT vs Sed_HOT"=c(0, -1, 0, 1, 0, 0),
"D1_HOT vs SS_HOT" = c(0, -1, 0, 0, 0, 1),
"SS_HOT vs Sed_HOT" = c(0, 0, 0, 1, 0, -1),
"D1_AMB vs Sed_AMB"=c(-1, 0, 1, 0, 0, 0),
"D1_AMB vs SS_AMB" = c(-1, 0, 0, 0, 1, 0),
"SS_AMB vs Sed_AMB" = c(0, 0, 1, 0, -1, 0),
"D1_AMB vs D1_HOT" = c(1, -1, 0, 0, 0, 0),
"SS_AMB vs SS_HOT" = c(0, 0, 0, 0, 1, -1),
"SED_AMB vs SED_HOT" = c(0, 0, 1, -1, 0, 0)
)
size.brm2 |>
emmeans(~symxtemp) |>
contrast(list(symxtemp=cmat)) |>
gather_emmeans_draws() |>
dplyr::summarise(median_hdci(.value),
Pl = mean(.value < 0),
Pg = mean(.value > 0)
)
size.brm2 |>
emmeans(~symxtemp) |>
as.data.frame() |>
ggplot(aes(y = emmean, x = symxtemp)) +
geom_pointrange(aes(ymin = lower.HPD, ymax = upper.HPD))
size.plot<- size.brm2 %>%
emmeans(~symxtemp) %>%
gather_emmeans_draws() %>%
ggplot() +
#geom_vline(xintercept = 0, linetype = "dashed") +
stat_slab(aes(
x = .value, y = symxtemp,
fill = stat(ggdist::cut_cdf_qi(cdf,
.width = c(0.5, 0.8, 0.95),
labels = scales::percent_format()
))
), color = "black") +
scale_fill_brewer("Interval", direction = -1, na.translate = FALSE) +
theme_classic() +
labs(x = "Size", y = "Treatment")
size.plot
#saveRDS(size.plot, file = "size.plot_A.tenuis_juv.rds")
knitr::opts_chunk$set(echo = TRUE)
colour.brm2 %>%
conditional_effects() %>%
plot(points = TRUE)
#colour.brm2 <- brm(colour.form,
#                  data = colour,
#                  prior = priors,
#                  sample_prior = 'yes',
#                  iter = 5000,
#                  warmup = 1000,
#                  chains = 3,
#                  thin = 10,
#                  control = list(adapt_delta = 0.9, max_treedepth = 20),
#                  refresh = 0
#                  )
#saveRDS(colour.brm2, file = "colour.brm2_A.tenuis_juv.rds")
colour.brm2 <- readRDS("/Users/alexmacadam/Documents/GitHub/Chapter-2--AGF-Physiology/data/colour.brm2_A.tenuis_juv.rds")
colour.brm2 %>%
conditional_effects() %>%
plot(points = TRUE)
colour.brm2 %>%
conditional_effects("symxtemp") %>%
plot(points = TRUE)
colour.brm2 %>%
conditional_effects() %>%
plot(points = TRUE)
colour.brm2 |>
summarise_draws(
median,
HDInterval::hdi,
Pl = ~mean(.x < 0),
Pg = ~mean(.x > 0),
rhat,
ess_bulk
) |>
knitr::kable()
colour.brm2 %>%
gather_draws(`b_Intercept.*|b_symxtemp.*`, regex=TRUE) %>%
ggplot() +
geom_vline(xintercept=0, linetype='dashed') +
stat_slab(aes(x = .value, y = .variable,
fill = stat(ggdist::cut_cdf_qi(cdf,
.width = c(0.5, 0.8, 0.95),
labels = scales::percent_format())
)), color='black') +
scale_fill_brewer('Interval', direction = -1, na.translate = FALSE)
colour.brm2 %>%
gather_draws(`.Intercept.*|b_popcrossxsym.*|b_Temp.*`, regex=TRUE) %>%
ggplot() +
geom_vline(xintercept = 0, linetype='dashed') +
stat_halfeye(aes(x=.value,  y=.variable)) +
theme_classic()
##in colour
colour.brm2 %>%
gather_draws(`^b_.*`, regex=TRUE) %>%
filter(.variable != 'b_Intercept') %>%
ggplot() +
geom_density_ridges_gradient(aes(x=(.value),
y = .variable,
fill = stat(x)),
alpha=0.4, colour = 'white',
quantile_lines = TRUE,
quantiles = c(0.025, 0.975)) +
geom_vline(xintercept = 1, linetype = 'dashed') +
scale_x_continuous() +
scale_fill_viridis_c(option = "C")
colour.dif.plot<- colour.brm2 %>%
emmeans(~symxtemp) %>%
gather_emmeans_draws() %>%
ggplot() +
#geom_vline(xintercept = 0, linetype = "dashed") +
stat_slab(aes(
x = .value, y = symxtemp,
fill = stat(ggdist::cut_cdf_qi(cdf,
.width = c(0.5, 0.8, 0.95),
labels = scales::percent_format()
))
), color = "black") +
scale_fill_brewer("Interval", direction = -1, na.translate = FALSE) +
theme_classic() +
labs(x = "Change in colour", y = "Treatment")
colour.dif.plot
#colour.brm3 <- brm(colour.form,
#                  data = colour,
#                  prior = priors,
#                  sample_prior = 'yes',
#                  iter = 10000,
#                  warmup = 5000,
#                  chains = 4,
#                  thin = 20,
#                  control = list(adapt_delta = 0.99, max_treedepth = 20),
#                  refresh = 0
#                  )
#saveRDS(colour.brm3, file = "colour.brm3_A.tenuis_juv.rds")
colour.brm3 <- readRDS("/Users/alexmacadam/Documents/GitHub/Chapter-2--AGF-Physiology/data/colour.brm3_A.tenuis_juv.rds")
colour.brm3 %>%
conditional_effects("symxtemp") %>%
plot(points = TRUE)
colour.brm3 %>%
gather_draws(`b_Intercept.*|b_symxtemp.*`, regex=TRUE) %>%
ggplot() +
geom_vline(xintercept=0, linetype='dashed') +
stat_slab(aes(x = .value, y = .variable,
fill = stat(ggdist::cut_cdf_qi(cdf,
.width = c(0.5, 0.8, 0.95),
labels = scales::percent_format())
)), color='black') +
scale_fill_brewer('Interval', direction = -1, na.translate = FALSE)
##in colour
colour.brm3 %>%
gather_draws(`^b_.*`, regex=TRUE) %>%
filter(.variable != 'b_Intercept') %>%
ggplot() +
geom_density_ridges_gradient(aes(x=(.value),
y = .variable,
fill = stat(x)),
alpha=0.4, colour = 'white',
quantile_lines = TRUE,
quantiles = c(0.025, 0.975)) +
geom_vline(xintercept = 1, linetype = 'dashed') +
scale_x_continuous() +
scale_fill_viridis_c(option = "C")
colour.brm3 |>
emmeans(~symxtemp) |>
contrast(list(symxtemp=cmat)) |>
gather_emmeans_draws() |>
dplyr::summarise(median_hdci(.value),
Pl = mean(.value < 0),
Pg = mean(.value > 0)
)
colour.brm3 |>
emmeans(~symxtemp) |>
as.data.frame() |>
ggplot(aes(y = emmean, x = symxtemp)) +
geom_pointrange(aes(ymin = lower.HPD, ymax = upper.HPD))
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
library(tidyverse) #for data wrangling
library(car)       #for regression diagnostics
library(broom)     #for tidy output
library(ggfortify) #for model diagnostics
library(sjPlot)    #for outputs
library(knitr)     #for kable
library(effects)   #for partial effects plots
library(emmeans)   #for estimating marginal means
library(MASS)      #for glm.nb
library(MuMIn)     #for AICc
library(brms)
library(broom.mixed)
library(tidybayes)
library(bayesplot)
library(rstanarm)
library(ggeffects)
library(rstan)
library(DHARMa)
library(ggridges)
library(easystats)
library(patchwork)
source('/Users/alexmacadam/Documents/GitHub/Chapter-2--AGF-Physiology/data/helperFunctions.R')
# Function for summarising survival standard error
summarySE <- function(data=NULL, measurevar=NULL, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
require(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm==TRUE) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Commenting this rename mean column line, as not assigning measurevar name properly
# # Rename the "mean" column
# datac <- rename(datac, measurevar = mean)
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
yii <- read.csv("/Users/alexmacadam/Dropbox/PhD/Chapter2_Physiology/Chapter 2 data/Bayes stats data/physiology/juv_PAM2020.csv", header=T, fileEncoding="UTF-8-BOM") |>
mutate(Family = factor(Family),
Species = factor(Species),
Temp = factor(Temp),
Tank = factor(Tank),
Timepoint = factor(Timepoint),
Cassette = factor(Cassette),
Plate.Slide = factor(Plate.Slide),
Treatment = factor(Treatment),
Cone = factor(Cone),
Crosstype = factor(Crosstype),
popcross = factor(popcross),
SINGLE.CLUMP = factor(SINGLE.CLUMP),
Mom = factor(Mom),
Dad = factor(Dad)
) |>
filter(Crosstype == "IndivCross", SINGLE.CLUMP == "S", Timepoint %in% c("T-2","T6"))
#Add Temp x Treatment column
yii$symxtemp <- paste(yii$Treatment, yii$Temp, sep='_')
yii$symxtemp <- as.factor(yii$symxtemp)
yii2<- yii |>
dplyr::select(Treatment, Timepoint, Temp,  YII_micro, IndID, popcross, Tank, Cassette, Plate.Slide, symxtemp) |>
mutate(popcross = factor(popcross)) |>
pivot_wider(names_from = Timepoint, values_from = YII_micro) |>
tidyr::unnest()
View(yii)
View(yii2)
#reshape data
yii2<- yii |>
dplyr::select(Treatment, Timepoint, Temp,  YII_micro, IndID, popcross, Tank, Cassette, Plate.Slide, symxtemp) |>
mutate(popcross = factor(popcross)) |>
pivot_wider(names_from = Timepoint, values_from = YII_micro) |>
tidyr::unnest()
yii2<- yii2 |>
mutate(YII_change = (`T6` - `T-2`)*1000) |> #times 1000 to make bigger numbers
drop_na(YII_change)
yii2$`T-2`[yii2$`T-2`<0.001] <- 0.001
yii2$T6[yii2$T6<0.001] <- 0.001
yii2<- yii2 |>
mutate(YII_p_change = ((`T6` - `T-2`)/`T-2`)*100) |>
drop_na(YII_p_change)
ggplot(yii2, aes(y = YII_change, x = popcross, colour = Temp)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
facet_wrap(~Treatment)
ggplot(yii2, aes(y = YII_change, x = popcross, colour = Temp)) +
geom_boxplot() +
facet_wrap(~Treatment)
final_yii<- yii |>
filter(Timepoint == "T6") |>
mutate(YII_micro = YII_micro * 100)
final_yii |>
ggplot(aes(y = YII_micro, x = popcross, colour = Temp)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
facet_wrap(~Treatment)
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
library(tidyverse) #for data wrangling
library(car)       #for regression diagnostics
library(broom)     #for tidy output
library(ggfortify) #for model diagnostics
library(sjPlot)    #for outputs
library(knitr)     #for kable
library(effects)   #for partial effects plots
library(emmeans)   #for estimating marginal means
library(MASS)      #for glm.nb
library(MuMIn)     #for AICc
library(brms)
library(broom.mixed)
library(tidybayes)
library(bayesplot)
library(rstanarm)
library(ggeffects)
library(rstan)
library(DHARMa)
library(ggridges)
library(easystats)
library(patchwork)
source('/Users/alexmacadam/Documents/GitHub/Chapter-2--AGF-Physiology/data/helperFunctions.R')
# Function for summarising survival standard error
summarySE <- function(data=NULL, measurevar=NULL, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
require(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm==TRUE) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Commenting this rename mean column line, as not assigning measurevar name properly
# # Rename the "mean" column
# datac <- rename(datac, measurevar = mean)
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
yii <- read.csv("/Users/alexmacadam/Dropbox/PhD/Chapter2_Physiology/Chapter 2 data/Bayes stats data/physiology/juv_PAM2020.csv", header=T, fileEncoding="UTF-8-BOM") |>
mutate(Family = factor(Family),
Species = factor(Species),
Temp = factor(Temp),
Tank = factor(Tank),
Timepoint = factor(Timepoint),
Cassette = factor(Cassette),
Plate.Slide = factor(Plate.Slide),
Treatment = factor(Treatment),
Cone = factor(Cone),
Crosstype = factor(Crosstype),
popcross = factor(popcross),
SINGLE.CLUMP = factor(SINGLE.CLUMP),
Mom = factor(Mom),
Dad = factor(Dad)
) |>
filter(Crosstype == "IndivCross", SINGLE.CLUMP == "S", Timepoint %in% c("T-2","T6"))
#Add Temp x Treatment column
yii$symxtemp <- paste(yii$Treatment, yii$Temp, sep='_')
yii$symxtemp <- as.factor(yii$symxtemp)
#reshape data
yii2<- yii |>
dplyr::select(Treatment, Timepoint, Temp,  YII_micro, IndID, popcross, Tank, Cassette, Plate.Slide, symxtemp) |>
mutate(popcross = factor(popcross)) |>
pivot_wider(names_from = Timepoint, values_from = YII_micro) |>
tidyr::unnest()
yii2<- yii2 |>
mutate(YII_change = (`T6` - `T-2`)*1000) |> #times 1000 to make bigger numbers
drop_na(YII_change)
yii2$`T-2`[yii2$`T-2`<0.001] <- 0.001
yii2$T6[yii2$T6<0.001] <- 0.001
yii2<- yii2 |>
mutate(YII_p_change = ((`T6` - `T-2`)/`T-2`)*100) |>
drop_na(YII_p_change)
#create final YII
final_yii<- yii |>
filter(Timepoint == "T6") |>
mutate(YII_micro = YII_micro * 100)
yii.sum.se <- summarySE(yii2, measurevar="YII_change",
groupvars=c("Temp", "Treatment"), na.rm=TRUE)
yii.form <- bf(YII_change ~ symxtemp + (1|Plate.Slide),
family = gaussian()
)
priors<- prior("normal(1000, 5000)", class = "Intercept") +
prior("normal(1000, 5000)", class = "b") +
#prior("normal(0, 0.5)", class = "sd", group = "Tank") +
prior("normal(0, 5000)", class = "sd", group = "Plate.Slide") +
prior(student_t(3, 0, 2000), class = 'sigma') +
prior(cauchy(0,2.5), class = 'sd')
YII.brm3 <- brm(yii.form,
data = yii2,
prior = priors,
sample_prior = 'yes',
iter = 10000,
warmup = 5000,
chains = 4,
thin = 20,
control = list(adapt_delta = 0.99, max_treedepth = 20),
refresh = 0
)
YII.brm3 %>% SUYR_prior_and_posterior()
#saveRDS(YII.brm3, file = "YII.brm3_A.tenuis_juv.rds")
YII.brm3 <- readRDS("/Users/alexmacadam/Documents/GitHub/Chapter-2--AGF-Physiology/data/YII.brm3_A.tenuis_juv.rds")
YII.brm3 %>% SUYR_prior_and_posterior()
priors<- prior("normal(0, 200)", class = "Intercept") +
prior("normal(0, 200)", class = "b") +
#prior("normal(0, 0.5)", class = "sd", group = "Tank") +
prior("normal(0, 300)", class = "sd", group = "Plate.Slide") +
prior(student_t(3, 0, 100), class = 'sigma') +
prior(cauchy(0,2.5), class = 'sd')
YII.brm3 <- brm(yii.form,
data = yii2,
prior = priors,
sample_prior = 'yes',
iter = 10000,
warmup = 5000,
chains = 4,
thin = 20,
control = list(adapt_delta = 0.99, max_treedepth = 20),
refresh = 0
)
YII.brm3 %>% SUYR_prior_and_posterior()
YII.brm3 %>% SUYR_prior_and_posterior()
#saveRDS(YII.brm3, file = "YII.brm3_A.tenuis_juv.rds")
YII.brm3 <- readRDS("/Users/alexmacadam/Documents/GitHub/Chapter-2--AGF-Physiology/data/YII.brm3_A.tenuis_juv.rds")
YII.brm3 %>% SUYR_prior_and_posterior()
priors<- prior("normal(0, 200)", class = "Intercept") +
prior("normal(0, 200)", class = "b") +
#prior("normal(0, 0.5)", class = "sd", group = "Tank") +
prior("normal(0, 300)", class = "sd", group = "Plate.Slide") +
prior(student_t(3, 0, 100), class = 'sigma') +
prior(cauchy(0,2.5), class = 'sd')
YII.brm3 <- brm(yii.form,
data = yii2,
prior = priors,
sample_prior = 'yes',
iter = 10000,
warmup = 5000,
chains = 4,
thin = 20,
control = list(adapt_delta = 0.99, max_treedepth = 20),
refresh = 0
)
YII.brm3 %>% SUYR_prior_and_posterior()
#saveRDS(YII.brm3, file = "YII.brm3_A.tenuis_juv.rds")
YII.brm3 <- readRDS("/Users/alexmacadam/Documents/GitHub/Chapter-2--AGF-Physiology/data/YII.brm3_A.tenuis_juv.rds")
YII.brm3 %>% SUYR_prior_and_posterior()
#saveRDS(YII.brm3, file = "YII.brm3_A.tenuis_juv.rds")
YII.brm3 <- readRDS("/Users/alexmacadam/Documents/GitHub/Chapter-2--AGF-Physiology/data/YII.brm3_A.tenuis_juv.rds")
YII.brm3 %>% SUYR_prior_and_posterior()
YII.change.plot<- YII.brm3 %>%
emmeans(~symxtemp) %>%
gather_emmeans_draws() %>%
ggplot() +
#geom_vline(xintercept = 0, linetype = "dashed") +
stat_slab(aes(
x = .value, y = symxtemp,
fill = stat(ggdist::cut_cdf_qi(cdf,
.width = c(0.5, 0.8, 0.95),
labels = scales::percent_format()
))
), color = "black") +
scale_fill_brewer("Interval", direction = -1, na.translate = FALSE) +
theme_classic() +
labs(x = "Change in colour", y = "Treatment")
YII.change.plot
